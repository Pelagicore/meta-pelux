# Generic SWUpdate artifacts generation
#
# Update artifacts for a given core-image-pelux-* image can be generated by
# writing a core-image-pelux-*-update.bb recipe including this file.
#
# This will use the machine-specific files found in pelux-image-update/ to
# generate artifacts. The sw-description files in those subdirectories can
# make use of the "%%PELUX_IMAGE_NAME_PLACEHOLDER%%" placeholder to refer to
# the .ext3.gz rootfs.

# This variable contains the name of the pelux image to be used as rootfs
PELUXIMG = '${@PN.replace("-update", "")}'

DESCRIPTION = "SWUpdate artifacts for ${PELUXIMG}"
LICENSE = "MIT"
LIC_FILES_CHKSUM = "file://${COMMON_LICENSE_DIR}/MIT;md5=0835ade698e0bcf8506ecda2f7b4f302"

IMAGE_DEPENDS = "${PELUXIMG}"
SWUPDATE_IMAGES = "${PELUXIMG}"
inherit swupdate

FILESEXTRAPATHS_prepend := "${THISDIR}/pelux-image-update/:"
SRC_URI = " file://sw-description "
SRC_URI_append_raspberrypi3 = " file://emmcsetup.lua "
SRC_URI_append_intel-corei7-64 = " file://emmcsetup.lua "
SRC_URI_append_arp = " file://emmcsetup.lua "

python do_swuimage_prepend () {
    # The swupdate.bbclass used from meta-swupdate expects the
    # SWUPDATE_IMAGES_FSTYPES[peluximg] var flag to be set. However, in our
    # usecase the peluximg is a variable so we need to set it up dynamically
    peluximg = d.getVar("PELUXIMG", True)
    fstype = ".ext3.gz"
    d.setVarFlag("SWUPDATE_IMAGES_FSTYPES", peluximg, fstype)

    # swupdate.bbclass also expects to find a sw-description file refering to
    # the name of an image. However, this name is also only known at runtime so
    # we need to rewrite the sw-description with 
    # "%%PELUX_IMAGE_NAME_PLACEHOLDER%%" replaced by the actual name of our
    # compressed rootfs.
    workdir = d.getVar('WORKDIR', True)
    swdescpath = os.path.join(workdir, "sw-description")

    swdesc = ""
    with open(swdescpath) as f:
        swdesc = f.read()

    appendmachine = d.getVarFlag("SWUPDATE_IMAGES_NOAPPEND_MACHINE", peluximg, True)
    if appendmachine == None:
        peluximgfilename = peluximg + '-' + d.getVar('MACHINE', True)
    else:
        peluximgfilename = peluximg

    peluximgfilename = peluximgfilename + fstype

    swdesc = swdesc.replace('%%PELUX_IMAGE_NAME_PLACEHOLDER%%', peluximgfilename)

    with open(swdescpath, "w") as f:
        f.write(swdesc)
}

