#!/usr/bin/groovy

// Copyright (C) 2018 Luxoft Sweden AB

void buildPelux(String variant, String imageName) {
    String peluxDir = "meta-pelux"
    String branchName = "master"

    // If this is a PR, CHANGE_TARGET will be set by the Pipeline Plugin,
    // otherwise check BRANCH_NAME which is set by Jenkins
    if (env.CHANGE_TARGET) {
        branchName = "${env.CHANGE_TARGET}"
    } else if (env.BRANCH_NAME) {
        branchName = "${env.BRANCH_NAME}"
    }

    node("Yocto") {
        // If there is a build for this PR in progress, abort it
        script {
            def jobname = env.JOB_NAME
            def buildnum = env.BUILD_NUMBER.toInteger()
            def job = Jenkins.instance.getItemByFullName(jobname)

            for (build in job.builds) {
                if (!build.isBuilding()) {
                    continue;
                }

                println("Aborting previous running build #${build.number}...") 

                build.doStop();
            }
        }
        dir(peluxDir) {
            checkout scm
        }

        // Initialize pelux-manifests to get the code
        sh "rm -rf pelux-manifests/"
        sh "git clone https://github.com/Pelagicore/pelux-manifests.git -b ${branchName}"
        println("Using the specified branch for build: ${branchName}")
        dir('pelux-manifests') {
            def code = load "ci-scripts/yocto.groovy"
            String peluxPath = "${env.WORKSPACE}/${peluxDir}"
            code.buildWithLayer(variant, imageName, peluxDir, peluxPath)
        }
    }
}

def variantMap = [:]
def variantList = []

// If VARIANT_LIST is defined in the Jenkins Environment
// then use that, otherwise use the default
// Note: This function will throw a NullPointerException if the
//       variable is not set.
try {
    variantList = env.VARIANT_LIST.split()
    
    println("Using the specified variant list for build [\"${variantList.join('", "')}\"]")
} catch(e) {
    println("Using the default variant list for build. \nCaught error: " + e)
    variantList = ['intel-qtauto:core-image-pelux-qtauto-neptune-dev',
                    'rpi-qtauto:core-image-pelux-qtauto-neptune-dev']
    println("[\"${variantList.join('", "')}\"]")
}

variantList.each {
    def list = it.split(":")
    variantMap["${list[0]}"] = {
        buildPelux(list[0], list[1])
    }
}

parallel (variantMap)
